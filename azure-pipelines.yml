## .NET Desktop
## Build and run tests for .NET Desktop or Windows classic desktop solutions.
## Add steps that publish symbols, save build artifacts, and more:
## https://docs.microsoft.com/azure/devops/pipelines/apps/windows/dot-net

#trigger:
#- '*'

#pool:
#  vmImage: 'windows-latest'

#variables:
#  solution: '**/*.sln'
#  buildPlatform: 'Any CPU'
#  buildConfiguration: 'Release'
#  dotnetSdkVersion: '6.x'

#steps:
#- task: NuGetToolInstaller@1

#- task: NuGetCommand@2
#  inputs:
#    restoreSolution: '$(solution)'

##- task: VSBuild@1
##  inputs:
##    solution: '$(solution)'
##    platform: '$(buildPlatform)'
##    configuration: '$(buildConfiguration)'
##comment

#- task: DotNetCoreCLI@2
#  displayName: 'Restore project dependencies'
#  inputs:
#    command: 'restore'
#    projects: '**/*.csproj'

#- task: DotNetCoreCLI@2
#  displayName: 'Build the project - $(buildConfiguration)'
#  inputs:
#    command: 'build'
#    arguments: '--no-restore --configuration $(buildConfiguration)'
#    projects: '**/*.csproj'

#- task: DotNetCoreCLI@2
#  displayName: 'Run unit tests - $(buildConfiguration)'
#  inputs:
#    command: 'test'
#    arguments: '--no-build --configuration $(buildConfiguration)'
#    publishTestResults: true
#    projects: '**/*.Test.csproj'

#- task: DotNetCoreCLI@2
#  displayName: 'Publish the project - $(buildConfiguration)'
#  inputs:
#    command: 'publish'
#    projects: '**/*.csproj'
#    publishWebProjects: false
#    arguments: '--no-build --configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)/$(buildConfiguration)'
#    zipAfterPublish: true

#- task: PublishBuildArtifacts@1
#  displayName: 'Publish Artifact: drop'
#  condition: succeeded()

trigger:
- '*'

variables:
  buildConfiguration: 'Release'

stages:
- stage: 'Build'
  displayName: 'Build Console app'
  jobs: 
  - job: 'Build'
    displayName: 'Build job'
    pool:
      vmImage: 'windows-latest'
      demands:
      - npm

    variables:
      wwwrootDir: 'MyCalculatorVS.csproj/wwwroot'
      dotnetSdkVersion: '6.x'

    steps:
    - task: UseDotNet@2
      displayName: 'Use .NET SDK $(dotnetSdkVersion)'
      inputs:
        version: '$(dotnetSdkVersion)'

    - task: Npm@1
      displayName: 'Run npm install'
      inputs:
        verbose: false

# https://www.creativebloq.com/web-design/what-is-sass-111517618
    - script: './node_modules/.bin/node-sass $(wwwrootDir) --output $(wwwrootDir)'
      displayName: 'Compile Sass assets'

 
# http://www.codedigest.com/quick-start/13/what-is-gulp-how-to-use-gulp
    - task: gulp@1
      displayName: 'Run gulp tasks'

    - script: 'echo "$(Build.DefinitionName), $(Build.BuildId), $(Build.BuildNumber)" > buildinfo.txt'
      displayName: 'Write build info'
      workingDirectory: $(wwwrootDir)

    - task: DotNetCoreCLI@2
      displayName: 'Restore project dependencies'
      inputs:
        command: 'restore'
        projects: '**/*.csproj'

    - task: DotNetCoreCLI@2
      displayName: 'Build the project - $(buildConfiguration)'
      inputs:
        command: 'build'
        arguments: '--no-restore --configuration $(buildConfiguration)'
        projects: '**/*.csproj'

    - task: DotNetCoreCLI@2
      displayName: 'Publish the project - $(buildConfiguration)'
      inputs:
        command: 'publish'
        projects: '**/*.csproj'
        publishWebProjects: false
        arguments: '--no-build --configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)/$(buildConfiguration)'
        zipAfterPublish: true

    - publish: '$(Build.ArtifactStagingDirectory)'
      artifact: drop